import {useEffect, useMemo, useState} from "react";
import confetti from "canvas-confetti";

// Generated by https://quicktype.io

export interface Movie {
  backdrop_path: string;
  first_air_date: string;
  genre_ids: number[];
  id: number;
  name: string;
  origin_country: string[];
  original_language: string;
  original_name: string;
  overview: string;
  popularity: number;
  poster_path: string;
  vote_average: number;
  vote_count: number;
}

async function getRandomMovie(): Promise<Movie> {
  return fetch("https://api.themoviedb.org/3/tv/top_rated?language=en-US&page=1", {
    headers: {
      Authorization: `Bearer ${import.meta.env.VITE_API_KEY}`,
    },
  })
    .then((res) => res.json() as Promise<{results: Movie[]}>)
    .then(({results: movies}) => movies[Math.floor(Math.random() * movies.length)]);
}

function getPartialMovieName(movie: Movie): string {
  const difficutly = 40;
  const indexes = Array.from({length: movie.name.length}, (_, index) => index)
    .sort((index) => (movie.name[index] === " " ? 1 : Math.random() >= 0.5 ? 1 : -1))
    .slice(0, Math.max(Math.floor((movie.name.length * difficutly) / 100), 3));

  return movie.name.split("").reduce((name, letter, index) => {
    name = name.concat(indexes.includes(index) ? "_" : letter);

    return name;
  }, "");
}

function App() {
  const [guess, setGuess] = useState<string>("");
  const [hintCount, setHitCount] = useState<number>(0);
  const [showHint, setShowHint] = useState<boolean>(false);
  const [points, setPoints] = useState<number>(0);
  const [lives, setLives] = useState<number>(3);
  const [movie, setMovie] = useState<null | Movie>(null);
  const partial = useMemo(() => {
    if (!movie) return "";

    return getPartialMovieName(movie);
  }, [movie]);

  useEffect(() => {
    confetti({particleCount: 5, spread: 80});
  }, [guess]);
  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();

    // const formData = new FormData(e.currentTarget);
    // const guess = formData.get("partial")?.toString();

    if (guess?.toLocaleLowerCase() === movie!.name.toLocaleLowerCase()) {
      //alert("Le pegaste capo");
      confetti({particleCount: 300, spread: 150});
      setPoints((points) => points + 1);
    } else {
      //("Terrible muerto");
      setLives((lives) => lives - 1);
    }

    setMovie(null);
    setGuess("");
    setShowHint(false);
    // e.currentTarget.partial.value = "";
  }

  function handleReset() {
    setLives(3);
    setPoints(0);
    setHitCount(0);
  }

  function handleHint() {
    if (!showHint) {
      setHitCount((hitCount) => hitCount + 1);
    }
    setShowHint(true);
  }

  useEffect(() => {
    getRandomMovie().then(setMovie);
  }, [points, lives]);

  return (
    <main className="container m-auto grid min-h-screen grid-rows-[auto,1fr,auto] px-4">
      <header className="text-xl font-bold leading-[3rem]">zeekit-challenge</header>
      <section>
        <div className="text-center text-xl rounded-2xl bg-gray-600 py-4 mt-4">
          LIVES: {lives} - POINTS: {points} - HINTS: {hintCount}
        </div>
        {!movie ? (
          <div>Loading...</div>
        ) : lives ? (
          <form
            className="mt-8  items-center rounded-xl font-mono flex flex-col gap-4"
            onSubmit={handleSubmit}
          >
            <input
              readOnly
              className="p-4 text-xl tracking-wider w-96 rounded-xl text-center"
              type="text"
              value={partial}
            />
            <input
              autoFocus
              autoComplete="off"
              className="p-4 text-xl tracking-wider w-96 rounded-xl text-center"
              name="partial"
              type="text"
              value={guess}
              onChange={(e) => setGuess(e.target.value)}
            />
            <button
              className="p-4 bg-gray-600 rounded-xl w-96 text-xl active:bg-yellow-900"
              type="button"
              onClick={handleHint}
            >
              Show hint
            </button>
            <button
              className="p-4 bg-gray-600 rounded-xl w-96 text-xl active:bg-yellow-900"
              type="submit"
            >
              Guess
            </button>
            {showHint && (
              <div className="w-96 mt-8 rounded-xl bg-gray-600 p-4">
                <p>{movie.overview}</p>
              </div>
            )}
          </form>
        ) : (
          <div className="text-center mt-4">
            <p className="text-2xl font-bold">Game Over</p>
            <button
              className="mt-4 bg-gray-600 rounded-xl p-4 text-xl font-bold active:bg-yellow-900"
              onClick={handleReset}
            >
              Play again
            </button>
          </div>
        )}
      </section>
      <footer className="text-center leading-[3rem] opacity-70">
        Â© {new Date().getFullYear()} zeekit-challenge
      </footer>
    </main>
  );
}

export default App;
